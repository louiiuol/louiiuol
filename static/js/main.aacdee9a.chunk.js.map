{"version":3,"sources":["assets/img/lg.svg","app/components/views/home/TypeWriter.tsx","app/components/views/home/Home.tsx","app/components/shared/header/Header.tsx","app/components/views/parcours/Parcours.tsx","app/App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","TypeWriter","className","avgTypingDelay","startDelay","Backspace","count","delay","Delay","ms","Home","src","logo","alt","Header","to","Parcours","App","id","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0FAAAA,EAAOC,QAAU,IAA0B,gC,6OCiB5BC,MAdf,WACI,OAAO,wBAAIC,UAAU,eAAc,kBAAC,IAAD,CAAQC,eAAgB,GAAIC,WAAY,GAAxC,cAE/B,kBAAC,IAAOC,UAAR,CAAkBC,MAAO,GAAIC,MAAO,MAAO,kBAAC,IAAOC,MAAR,CAAcC,GAAI,MAF9B,8BAI/B,kBAAC,IAAOJ,UAAR,CAAkBC,MAAO,GAAIC,MAAO,MAAO,kBAAC,IAAOC,MAAR,CAAcC,GAAI,MAJ9B,0BAM/B,kBAAC,IAAOJ,UAAR,CAAkBC,MAAO,GAAIC,MAAO,MAAO,kBAAC,IAAOC,MAAR,CAAcC,GAAI,MAN9B,6CAQ/B,kBAAC,IAAOJ,UAAR,CAAkBC,MAAO,GAAIC,MAAO,MAAO,kBAAC,IAAOC,MAAR,CAAcC,GAAI,MAR9B,iC,MCWxBC,MATf,WACI,OACI,yBAAKR,UAAU,WACX,yBAAKS,IAAKC,IAAMV,UAAU,WAAWW,IAAI,0CACzC,kBAAC,EAAD,Q,aCOGC,MAZf,WACI,OAAO,yBAAKZ,UAAU,YAClB,4BAAI,qCAAJ,QAA2B,qCAA3B,YACA,wBAAIA,UAAU,SACV,kBAAC,IAAD,CAAMa,GAAG,KAAI,wBAAIb,UAAU,aAAd,YACb,kBAAC,IAAD,CAAMa,GAAG,aAAY,wBAAIb,UAAU,aAAd,aACrB,kBAAC,IAAD,CAAMa,GAAG,YAAW,wBAAIb,UAAU,aAAd,YACpB,kBAAC,IAAD,CAAMa,GAAG,YAAW,wBAAIb,UAAU,aAAd,eCRfc,MAFjB,WACI,OAAQ,uC,aCmBGC,MAff,WACE,OACE,kBAAC,IAAD,KACE,yBAAKC,GAAG,OACN,kBAAC,EAAD,MACA,6BAAShB,UAAU,oBACjB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOiB,OAAK,EAACC,KAAK,IAAIC,UAAWX,IACjC,kBAAC,IAAD,CAAOU,KAAK,YAAYC,UAAWL,SCH3BM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.aacdee9a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/lg.86237f32.svg\";","import React from 'react';\nimport Typist from 'react-typist';\n\nfunction TypeWriter() {\n    return <h2 className=\"type-writer\"><Typist avgTypingDelay={50} startDelay={0}>\n        Bienvenue !\n        <Typist.Backspace count={28} delay={950} /><Typist.Delay ms={200} />\n        Je suis un UI / UX Designer\n        <Typist.Backspace count={16} delay={950} /><Typist.Delay ms={200} />\n        architecte informatique\n        <Typist.Backspace count={23} delay={950} /><Typist.Delay ms={200} />\n        Développeur fullstack Javascript & JAVA\n        <Typist.Backspace count={42} delay={950} /><Typist.Delay ms={200} />\n        disponible pour échanger\n        </Typist></h2>\n}\n\nexport default TypeWriter;","import React from 'react';\nimport logo from '../../../../assets/img/lg.svg';\nimport TypeWriter from './TypeWriter';\n\nimport './Home.css'\n\nfunction Home() {\n    return (\n        <div className='content'>\n            <img src={logo} className=\"App-logo\" alt=\"logo général de présentation\" />\n            <TypeWriter />\n        </div>\n    );\n}\n\nexport default Home;","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport './Header.css';\n\nfunction Header() {\n    return <nav className=\"main-nav\">\n        <h3><strong>L</strong>ouis <strong>G</strong>ODLEWSKI</h3>\n        <ul className='links'>\n            <Link to='/'><li className=\"nav-links\">Accueil</li></Link>\n            <Link to='/parcours'><li className=\"nav-links\">Parcours</li></Link>\n            <Link to='/projets'><li className=\"nav-links\">Projets</li></Link>\n            <Link to='/contact'><li className=\"nav-links\">Contact</li></Link>\n        </ul>\n    </nav>\n}\n\nexport default Header;","import React from 'react';\n\nfunction Parcours() {\n    return (<div>hello</div>);\n} export default Parcours;","import React from 'react';\nimport Home from './components/views/home/Home';\nimport Header from './components/shared/header/Header';\nimport Parcours from './components/views/parcours/Parcours';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport './App.css';\n\nfunction App() {\n  return (\n    <Router>\n      <div id=\"app\">\n        <Header />\n        <section className=\"global-container\">\n          <Switch>\n            <Route exact path='/' component={Home}></Route>\n            <Route path='/parcours' component={Parcours}></Route>\n          </Switch>\n        </section>\n      </div>\n    </Router>);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}